	// function: allocates memory for SetupBones and stores relevant data.
	void store(Player* player) {
		// allocate game heap.
		m_bones = (BoneArray*)g_csgo.m_mem_alloc->Alloc(sizeof(BoneArray) * 128);

		// player data.
		m_player = player;
		m_immune = player->m_fImmuneToGunGameDamageTime();
		m_tick = g_csgo.m_cl->m_server_tick;
		m_simtime_delay = m_tick - game::TICKS_TO_TIME(player->m_flSimulationTime());
		m_exploiting = /* maybe add an lc check here */ m_teleporting && m_simtime_delay >= 12; // come the fuck at me homo
		m_push_to_aimbot = !m_exploiting && !m_broke_lc;

		// netvars.
		m_lagcorrected_time = m_sim_time = player->m_flSimulationTime();
		m_old_sim_time = player->m_flOldSimulationTime();
		m_extrapolated_flags = m_flags = player->m_fFlags();
		m_extrapolated_origin = m_origin = player->m_vecOrigin();
		m_old_origin = player->m_vecOldOrigin();
		m_eye_angles = player->m_angEyeAngles();
		m_abs_ang = player->GetAbsAngles();
		m_body = player->m_flLowerBodyYawTarget();
		m_mins = player->m_vecMins();
		m_maxs = player->m_vecMaxs();
		m_duck = player->m_flDuckAmount();
		m_extrapolated_velocity = m_velocity = player->m_vecVelocity();
		m_max_current_speed = player->m_flMaxspeed();

		// save networked animlayers.
		player->GetAnimLayers(m_layers);

		// normalize eye angles.
		m_eye_angles.normalize();
		math::clamp(m_eye_angles.x, -90.f, 90.f);

		// get lag.
		m_lag = game::TIME_TO_TICKS(m_sim_time - m_old_sim_time);
		m_lag = std::clamp(m_lag, 0, 32); // clamp it so we don't interpolate too far.

		// save the players time delta for later calculations.
		m_time_delta = m_sim_time + m_old_sim_time;

		// compute animtime.
		m_anim_time = m_old_sim_time + g_csgo.m_globals->m_interval;

		// simple record validation check
		m_valid = valid();

		// we have stored all of our data
		m_data_stored = true;

#ifdef SONTHTEST
		g_console.log(XOR("record stored\n"));
#endif
	}


	// data.
	Player* m_player;
	float   m_immune;
	int     m_tick;
	int     m_lag;
	bool    m_dormant, m_first_after_dormancy, m_animated, m_data_stored, m_valid, m_push_to_aimbot, m_teleporting, m_spinbotting, m_eye_yaw_updated;

	// netvars.
	float  m_sim_time;
	float  m_old_sim_time, m_time_delta;
	int    m_flags;
	vec3_t m_origin;
	vec3_t m_old_origin;
	vec3_t m_velocity;
	vec3_t m_mins;
	vec3_t m_maxs;
	ang_t  m_eye_angles;
	ang_t  m_abs_ang;
	ang_t  set_eye_angles;
	float  m_body;
	float  m_duck;

	// anim stuff.
	C_AnimationLayer m_layers[13];
	float            m_poses[24];
	vec3_t           m_anim_velocity;
	float            m_anim_speed, m_max_current_speed;

	// bone stuff.
	bool       m_setup;
	BoneArray* m_bones;

	// lagfix stuff.
	bool   m_broke_lc, m_exploiting, m_skip_due_to_resolver;
	vec3_t m_extrapolated_origin;
	vec3_t m_extrapolated_velocity;
	float  m_lagcorrected_time;
	int    m_extrapolated_flags, m_simtime_delay, m_started_anim_update_time;

	// resolver stuff.
	size_t m_mode;
	bool   m_fake_walk;
	bool   m_shot;
	int    m_strafe_sequence, m_baim_tick;
	float  m_away;
	float  m_anim_time, m_primary_cycle, m_move_weight, m_goal_feet_yaw, m_current_feet_yaw, m_strafe_change_weight, m_strafe_change_cycle, m_acceleration_weight, m_last_pitch, m_last_pitch_change, m_last_yaw, m_last_yaw_change;

	// other stuff.
	float  m_interp_time;